
"""
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ–¥—ñ—è–º–∏ –±–µ–∑–ø–µ–∫–∏
–ì–æ–ª–æ–≤–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞ –¥–ª—è –∑–∞–ø—É—Å–∫—É —Å–∏—Å—Ç–µ–º–∏
"""

import sys
import os
from datetime import datetime
from sec_manager import SecurityEventsManager

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏"""
    print("üõ°Ô∏è  –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ–¥—ñ—è–º–∏ –±–µ–∑–ø–µ–∫–∏...")
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥—ñ–π –±–µ–∑–ø–µ–∫–∏
        manager = SecurityEventsManager()
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞!")
        print(f"üìÖ –ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = manager.get_statistics()
        print(f"üìä –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –î–∂–µ—Ä–µ–ª –ø–æ–¥—ñ–π: {stats['total_sources']}")
        print(f"   ‚Ä¢ –¢–∏–ø—ñ–≤ –ø–æ–¥—ñ–π: {stats['total_event_types']}")
        print(f"   ‚Ä¢ –í—Å—å–æ–≥–æ –ø–æ–¥—ñ–π –≤ —Å–∏—Å—Ç–µ–º—ñ: {stats['total_events']}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
        if len(sys.argv) > 1:
            handle_command_line_args(manager, sys.argv[1:])
        else:
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –º–µ–Ω—é
            manager.interactive_menu()
            
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–∞ –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)

def handle_command_line_args(manager: SecurityEventsManager, args: list):
    """–û–±—Ä–æ–±–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞"""
    
    if args[0] == '--help' or args[0] == '-h':
        print_help()
        return
    
    elif args[0] == '--stats':
        # –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = manager.get_statistics()
        manager._show_statistics()
    
    elif args[0] == '--import' and len(args) >= 3:
        # –Ü–º–ø–æ—Ä—Ç –ª–æ–≥—ñ–≤: --import <file_path> <source_name>
        file_path = args[1]
        source_name = args[2]
        
        if not os.path.exists(file_path):
            print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ —ñ—Å–Ω—É—î")
            return
        
        print(f"üìÅ –Ü–º–ø–æ—Ä—Ç –ª–æ–≥—ñ–≤ –∑ —Ñ–∞–π–ª—É {file_path} –¥–ª—è –¥–∂–µ—Ä–µ–ª–∞ {source_name}")
        imported = manager.import_logs_from_file(file_path, source_name)
        print(f"‚úÖ –Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {imported} –∑–∞–ø–∏—Å—ñ–≤")
    
    elif args[0] == '--failed-logins':
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–µ–≤–¥–∞–ª—ñ –≤—Ö–æ–¥–∏ –∑–∞ 24 –≥–æ–¥–∏–Ω–∏
        results = manager.get_failed_logins_24h()
        manager.print_results_table(results, "–ù–µ–≤–¥–∞–ª—ñ –≤—Ö–æ–¥–∏ –∑–∞ 24 –≥–æ–¥–∏–Ω–∏")
    
    elif args[0] == '--brute-force':
        # –í–∏—è–≤–∏—Ç–∏ –∞—Ç–∞–∫–∏ –ø—ñ–¥–±–æ—Ä—É –ø–∞—Ä–æ–ª—è
        results = manager.detect_brute_force_attacks()
        manager.print_results_table(results, "–ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –∞—Ç–∞–∫–∏ –ø—ñ–¥–±–æ—Ä—É –ø–∞—Ä–æ–ª—è")
    
    elif args[0] == '--critical':
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–¥—ñ—ó –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
        results = manager.get_critical_events_week()
        manager.print_results_table(results, "–ö—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–¥—ñ—ó –∑–∞ —Ç–∏–∂–¥–µ–Ω—å")
    
    elif args[0] == '--search' and len(args) >= 2:
        # –ü–æ—à—É–∫ –∑–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º: --search <keyword>
        keyword = args[1]
        results = manager.search_events_by_keyword(keyword)
        manager.print_results_table(results, f"–ü–æ—à—É–∫ –∑–∞ '{keyword}'")
    
    elif args[0] == '--generate-logs':
        # –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑—Ä–∞–∑–∫–æ–≤—ñ –ª–æ–≥–∏
        file_path = args[1] if len(args) >= 2 else "sample_logs.txt"
        num_entries = int(args[2]) if len(args) >= 3 and args[2].isdigit() else 100
        
        generated_file = manager.generate_sample_logs(file_path, num_entries)
        print(f"‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∑—Ä–∞–∑–∫–æ–≤—ñ –ª–æ–≥–∏: {generated_file}")
    
    elif args[0] == '--add-source' and len(args) >= 4:
        # –î–æ–¥–∞—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ: --add-source <name> <location> <type>
        name, location, source_type = args[1], args[2], args[3]
        try:
            source_id = manager.register_event_source(name, location, source_type)
            print(f"‚úÖ –î–∂–µ—Ä–µ–ª–æ '{name}' –¥–æ–¥–∞–Ω–æ –∑ ID: {source_id}")
        except ValueError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    elif args[0] == '--add-event-type' and len(args) >= 3:
        # –î–æ–¥–∞—Ç–∏ —Ç–∏–ø –ø–æ–¥—ñ—ó: --add-event-type <type_name> <severity>
        type_name, severity = args[1], args[2]
        try:
            type_id = manager.register_event_type(type_name, severity)
            print(f"‚úÖ –¢–∏–ø –ø–æ–¥—ñ—ó '{type_name}' –¥–æ–¥–∞–Ω–æ –∑ ID: {type_id}")
        except ValueError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    else:
        print(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: {args[0]}")
        print("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ --help –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏")

def print_help():
    """–í–∏–≤–µ—Å—Ç–∏ –¥–æ–≤—ñ–¥–∫—É"""
    help_text = """
üõ°Ô∏è  –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ü–û–î–Ü–Ø–ú–ò –ë–ï–ó–ü–ï–ö–ò

–í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø:
    python main.py [–û–ü–¶–Ü–á]

–û–ü–¶–Ü–á:
    --help, -h                    –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É
    --stats                       –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º–∏
    --import <—Ñ–∞–π–ª> <–¥–∂–µ—Ä–µ–ª–æ>     –Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –ª–æ–≥–∏ –∑ —Ñ–∞–π–ª—É
    --failed-logins              –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–µ–≤–¥–∞–ª—ñ –≤—Ö–æ–¥–∏ –∑–∞ 24 –≥–æ–¥–∏–Ω–∏
    --brute-force                –í–∏—è–≤–∏—Ç–∏ –∞—Ç–∞–∫–∏ –ø—ñ–¥–±–æ—Ä—É –ø–∞—Ä–æ–ª—è
    --critical                   –ü–æ–∫–∞–∑–∞—Ç–∏ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–¥—ñ—ó –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
    --search <–∫–ª—é—á–æ–≤–µ_—Å–ª–æ–≤–æ>     –ü–æ—à—É–∫ –ø–æ–¥—ñ–π –∑–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º
    --generate-logs [—Ñ–∞–π–ª] [–∫-—Å—Ç—å] –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑—Ä–∞–∑–∫–æ–≤—ñ –ª–æ–≥–∏
    --add-source <–Ω–∞–∑–≤–∞> <–º—ñ—Å—Ü–µ> <—Ç–∏–ø> –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –¥–∂–µ—Ä–µ–ª–æ –ø–æ–¥—ñ–π
    --add-event-type <–Ω–∞–∑–≤–∞> <—Å–µ—Ä–π–æ–∑–Ω—ñ—Å—Ç—å> –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–∏–ø –ø–æ–¥—ñ—ó

–ü–†–ò–ö–õ–ê–î–ò:
    python main.py                           # –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –º–µ–Ω—é
    python main.py --stats                   # –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    python main.py --import logs.txt Firewall_A  # –Ü–º–ø–æ—Ä—Ç –ª–æ–≥—ñ–≤
    python main.py --search "malware"        # –ü–æ—à—É–∫ –∑–∞ —Å–ª–æ–≤–æ–º "malware"
    python main.py --generate-logs sample.txt 50  # –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ 50 –∑–∞–ø–∏—Å—ñ–≤

–ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –º–µ–Ω—é.
"""
    print(help_text)

def demo_mode():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π —Ä–µ–∂–∏–º –∑ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"""
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–ô–ù–ò–ô –†–ï–ñ–ò–ú")
    print("="*50)
    
    manager = SecurityEventsManager()
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ –∑—Ä–∞–∑–∫–æ–≤—ñ –ª–æ–≥–∏
    print("\n1Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑—Ä–∞–∑–∫–æ–≤–∏—Ö –ª–æ–≥—ñ–≤...")
    sample_file = manager.generate_sample_logs("demo_logs.txt", 20)
    
    # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –ª–æ–≥–∏
    print("\n2Ô∏è‚É£ –Ü–º–ø–æ—Ä—Ç –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö –ª–æ–≥—ñ–≤...")
    imported = manager.import_logs_from_file(sample_file, "Firewall_A")
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –∑–∞–ø–∏—Ç—ñ–≤
    print("\n3Ô∏è‚É£ –ê–Ω–∞–ª—ñ–∑ –Ω–µ–≤–¥–∞–ª–∏—Ö –≤—Ö–æ–¥—ñ–≤ –∑–∞ 24 –≥–æ–¥–∏–Ω–∏...")
    failed_logins = manager.get_failed_logins_24h()
    manager.print_results_table(failed_logins[:3], "–ü—Ä–∏–∫–ª–∞–¥ –Ω–µ–≤–¥–∞–ª–∏—Ö –≤—Ö–æ–¥—ñ–≤")
    
    print("\n4Ô∏è‚É£ –ü–æ—à—É–∫ –ø–æ–¥—ñ–π –∑ —Å–ª–æ–≤–æ–º 'login'...")
    search_results = manager.search_events_by_keyword("login")
    manager.print_results_table(search_results[:3], "–ü—Ä–∏–∫–ª–∞–¥ –ø–æ—à—É–∫—É")
    
    print("\n5Ô∏è‚É£ –í–∏—è–≤–ª–µ–Ω–Ω—è –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –∞—Ç–∞–∫...")
    brute_force = manager.detect_brute_force_attacks()
    if brute_force:
        manager.print_results_table(brute_force, "–ü—ñ–¥–æ–∑—Ä—ñ–ª—ñ IP-–∞–¥—Ä–µ—Å–∏")
    else:
        print("üõ°Ô∏è –ü—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ")
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìÑ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª: {sample_file}")
    print("üóÉÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: security_events.db")

if __name__ == "__main__":
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –¥–µ–º–æ
    if len(sys.argv) > 1 and sys.argv[1] == '--demo':
        demo_mode()
    else:
        main()