from typing import List, Dict, Any, Optional
from datetime import datetime
from database import SecurityEventsDB
from log_parser import LogParser, ParsedLogEntry

class SecurityEventsManager:
    """–û—Å–Ω–æ–≤–Ω–∏–π –∫–ª–∞—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ–¥—ñ—è–º–∏ –±–µ–∑–ø–µ–∫–∏"""
    
    def __init__(self, db_path: str = "security_events.db"):
        self.db = SecurityEventsDB(db_path)
        self.parser = LogParser()
    
    def register_event_source(self, name: str, location: str, source_type: str) -> int:
        """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞ –ø–æ–¥—ñ–π"""
        try:
            source_id = self.db.register_event_source(name, location, source_type)
            print(f"‚úÖ –î–∂–µ—Ä–µ–ª–æ –ø–æ–¥—ñ–π '{name}' —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –∑ ID: {source_id}")
            return source_id
        except ValueError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –¥–∂–µ—Ä–µ–ª–∞: {e}")
            raise
    
    def register_event_type(self, type_name: str, severity: str) -> int:
        """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø—É –ø–æ–¥—ñ–π"""
        valid_severities = ['Informational', 'Warning', 'Critical']
        if severity not in valid_severities:
            raise ValueError(f"–°–µ—Ä–π–æ–∑–Ω—ñ—Å—Ç—å –º–∞—î –±—É—Ç–∏ –æ–¥–Ω–∞ –∑: {', '.join(valid_severities)}")
        
        try:
            type_id = self.db.register_event_type(type_name, severity)
            print(f"‚úÖ –¢–∏–ø –ø–æ–¥—ñ—ó '{type_name}' —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –∑ ID: {type_id}")
            return type_id
        except ValueError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∏–ø—É –ø–æ–¥—ñ—ó: {e}")
            raise
    
    def log_security_event(self, source_id: int, event_type_id: int, message: str,
                          ip_address: Optional[str] = None, username: Optional[str] = None,
                          timestamp: Optional[datetime] = None) -> int:
        """–ó–∞–ø–∏—Å –Ω–æ–≤–æ—ó –ø–æ–¥—ñ—ó –±–µ–∑–ø–µ–∫–∏"""
        try:
            event_id = self.db.log_security_event(
                source_id, event_type_id, message, ip_address, username, timestamp
            )
            print(f"‚úÖ –ü–æ–¥—ñ—è –±–µ–∑–ø–µ–∫–∏ –∑–∞–ø–∏—Å–∞–Ω–∞ –∑ ID: {event_id}")
            return event_id
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –ø–æ–¥—ñ—ó: {e}")
            raise
    
    def import_logs_from_file(self, file_path: str, source_name: str) -> int:
        """–Ü–º–ø–æ—Ä—Ç –ª–æ–≥—ñ–≤ –∑ —Ñ–∞–π–ª—É"""
        print(f"üîÑ –ü–æ—á–∞—Ç–æ–∫ —ñ–º–ø–æ—Ä—Ç—É –ª–æ–≥—ñ–≤ –∑ —Ñ–∞–π–ª—É: {file_path}")
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥–∂–µ—Ä–µ–ª–æ –ø–æ–¥—ñ–π –∑–∞ –Ω–∞–∑–≤–æ—é
        sources = self.db.get_event_sources()
        source = next((s for s in sources if s['name'] == source_name), None)
        
        if not source:
            print(f"‚ùå –î–∂–µ—Ä–µ–ª–æ '{source_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return 0
        
        source_id = source['id']
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ç–∏–ø–∏ –ø–æ–¥—ñ–π –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É
        event_types = {et['type_name']: et for et in self.db.get_event_types()}
        
        # –ü–∞—Ä—Å–∏–º–æ —Ñ–∞–π–ª
        try:
            parsed_entries = self.parser.parse_log_file(file_path)
            imported_count = 0
            
            for entry in parsed_entries:
                try:
                    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –ø–æ–¥—ñ—ó
                    if entry.event_type and entry.event_type in event_types:
                        event_type_id = event_types[entry.event_type]['id']
                    else:
                        # –Ø–∫—â–æ —Ç–∏–ø –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —Ç–∏–ø
                        event_type_id = event_types.get('Login Success', {}).get('id', 1)
                    
                    # –ó–∞–ø–∏—Å—É—î–º–æ –ø–æ–¥—ñ—é –≤ –ë–î
                    self.db.log_security_event(
                        source_id=source_id,
                        event_type_id=event_type_id,
                        message=entry.message,
                        ip_address=entry.ip_address,
                        username=entry.username,
                        timestamp=entry.timestamp
                    )
                    imported_count += 1
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –∑–∞–ø–∏—Å—É: {e}")
                    continue
            
            print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {imported_count} –∑–∞–ø–∏—Å—ñ–≤ –∑ {len(parsed_entries)} —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–∏—Ö")
            return imported_count
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É —Ñ–∞–π–ª—É: {e}")
            return 0
    
    def import_logs_from_multiple_files(self, file_paths: List[str], source_name: str) -> int:
        """–Ü–º–ø–æ—Ä—Ç –ª–æ–≥—ñ–≤ –∑ –¥–µ–∫—ñ–ª—å–∫–æ—Ö —Ñ–∞–π–ª—ñ–≤"""
        total_imported = 0
        
        for file_path in file_paths:
            imported = self.import_logs_from_file(file_path, source_name)
            total_imported += imported
        
        print(f"üéØ –ó–∞–≥–∞–ª–æ–º —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {total_imported} –∑–∞–ø–∏—Å—ñ–≤ –∑ {len(file_paths)} —Ñ–∞–π–ª—ñ–≤")
        return total_imported
    
    def get_failed_logins_24h(self) -> List[Dict[str, Any]]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø–æ–¥—ñ—ó 'Login Failed' –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏"""
        results = self.db.get_failed_logins_24h()
        print(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ {len(results)} –Ω–µ–≤–¥–∞–ª–∏—Ö —Å–ø—Ä–æ–± –≤—Ö–æ–¥—É –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏")
        return results
    
    def detect_brute_force_attacks(self) -> List[Dict[str, Any]]:
        """–í–∏—è–≤–∏—Ç–∏ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –∞—Ç–∞–∫–∏ –ø—ñ–¥–±–æ—Ä—É –ø–∞—Ä–æ–ª—è"""
        results = self.db.detect_brute_force_attacks()
        print(f"üö® –í–∏—è–≤–ª–µ–Ω–æ {len(results)} –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö IP-–∞–¥—Ä–µ—Å –∑ –º–Ω–æ–∂–∏–Ω–Ω–∏–º–∏ –Ω–µ–≤–¥–∞–ª–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏ –≤—Ö–æ–¥—É")
        return results
    
    def get_critical_events_week(self) -> List[Dict[str, Any]]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–¥—ñ—ó –∑–∞ —Ç–∏–∂–¥–µ–Ω—å, –∑–≥—Ä—É–ø–æ–≤–∞–Ω—ñ –∑–∞ –¥–∂–µ—Ä–µ–ª–æ–º"""
        results = self.db.get_critical_events_week()
        print(f"‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–¥—ñ—ó –∑ {len(results)} –¥–∂–µ—Ä–µ–ª –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å")
        return results
    
    def search_events_by_keyword(self, keyword: str) -> List[Dict[str, Any]]:
        """–ü–æ—à—É–∫ –ø–æ–¥—ñ–π –∑–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º"""
        results = self.db.search_events_by_keyword(keyword)
        print(f"üîé –ó–Ω–∞–π–¥–µ–Ω–æ {len(results)} –ø–æ–¥—ñ–π –∑ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º '{keyword}'")
        return results
    
    def get_event_sources(self) -> List[Dict[str, Any]]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –¥–∂–µ—Ä–µ–ª–∞ –ø–æ–¥—ñ–π"""
        return self.db.get_event_sources()
    
    def get_event_types(self) -> List[Dict[str, Any]]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ç–∏–ø–∏ –ø–æ–¥—ñ–π"""
        return self.db.get_event_types()
    
    def get_statistics(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º–∏"""
        sources = self.get_event_sources()
        event_types = self.get_event_types()
        
        # Get recent events count
        from datetime import timedelta
        recent_events = self.search_events_by_keyword("")  # Get all events
        
        stats = {
            'total_sources': len(sources),
            'total_event_types': len(event_types),
            'total_events': len(recent_events),
            'sources': sources,
            'event_types': event_types
        }
        
        return stats
    
    def generate_sample_logs(self, file_path: str = "sample_logs.txt", num_entries: int = 100):
        """–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑—Ä–∞–∑–∫–æ–≤—ñ –ª–æ–≥–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
        self.parser.generate_sample_log_file(file_path, num_entries)
        return file_path
    
    def print_results_table(self, results: List[Dict[str, Any]], title: str = "–†–µ–∑—É–ª—å—Ç–∞—Ç–∏"):
        """–í–∏–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É –≤–∏–≥–ª—è–¥—ñ —Ç–∞–±–ª–∏—Ü—ñ"""
        if not results:
            print(f"\nüìã {title}: –î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        print(f"\nüìã {title} ({len(results)} –∑–∞–ø–∏—Å—ñ–≤):")
        print("=" * 80)
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫—ñ –ø–æ–ª—è –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏
        if 'timestamp' in results[0]:
            for i, result in enumerate(results[:10], 1):  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 10 –∑–∞–ø–∏—Å—ñ–≤
                print(f"{i}. {result.get('timestamp', 'N/A')} | "
                      f"–î–∂–µ—Ä–µ–ª–æ: {result.get('source_name', 'N/A')} | "
                      f"–¢–∏–ø: {result.get('type_name', 'N/A')} | "
                      f"IP: {result.get('ip_address', 'N/A')} | "
                      f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {result.get('username', 'N/A')}")
                print(f"   –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {result.get('message', 'N/A')[:100]}...")
                print("-" * 80)
        else:
            # –î–ª—è —ñ–Ω—à–∏—Ö —Ç–∏–ø—ñ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            for i, result in enumerate(results, 1):
                print(f"{i}. {result}")
                print("-" * 80)
        
        if len(results) > 10:
            print(f"... —Ç–∞ —â–µ {len(results) - 10} –∑–∞–ø–∏—Å—ñ–≤")
    
    def interactive_menu(self):
        """–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –º–µ–Ω—é –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Å–∏—Å—Ç–µ–º–æ—é"""
        while True:
            print("\n" + "="*60)
            print("üõ°Ô∏è  –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ü–û–î–Ü–Ø–ú–ò –ë–ï–ó–ü–ï–ö–ò")
            print("="*60)
            print("1. üìä –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º–∏")
            print("2. üìù –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤–µ –¥–∂–µ—Ä–µ–ª–æ –ø–æ–¥—ñ–π")
            print("3. üè∑Ô∏è  –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–∏–ø –ø–æ–¥—ñ–π")
            print("4. ‚úçÔ∏è  –ó–∞–ø–∏—Å–∞—Ç–∏ –Ω–æ–≤—É –ø–æ–¥—ñ—é –±–µ–∑–ø–µ–∫–∏")
            print("5. üìÅ –Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –ª–æ–≥–∏ –∑ —Ñ–∞–π–ª—É")
            print("6. üîç –ù–µ–≤–¥–∞–ª—ñ –≤—Ö–æ–¥–∏ –∑–∞ 24 –≥–æ–¥–∏–Ω–∏")
            print("7. üö® –í–∏—è–≤–∏—Ç–∏ –∞—Ç–∞–∫–∏ –ø—ñ–¥–±–æ—Ä—É –ø–∞—Ä–æ–ª—è")
            print("8. ‚ö†Ô∏è  –ö—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–¥—ñ—ó –∑–∞ —Ç–∏–∂–¥–µ–Ω—å")
            print("9. üîé –ü–æ—à—É–∫ –∑–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º")
            print("10. üìÑ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑—Ä–∞–∑–∫–æ–≤—ñ –ª–æ–≥–∏")
            print("0. üö™ –í–∏–π—Ç–∏")
            print("="*60)
            
            choice = input("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (0-10): ").strip()
            
            try:
                if choice == '0':
                    print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                    break
                elif choice == '1':
                    self._show_statistics()
                elif choice == '2':
                    self._register_source_interactive()
                elif choice == '3':
                    self._register_event_type_interactive()
                elif choice == '4':
                    self._log_event_interactive()
                elif choice == '5':
                    self._import_logs_interactive()
                elif choice == '6':
                    results = self.get_failed_logins_24h()
                    self.print_results_table(results, "–ù–µ–≤–¥–∞–ª—ñ –≤—Ö–æ–¥–∏ –∑–∞ 24 –≥–æ–¥–∏–Ω–∏")
                elif choice == '7':
                    results = self.detect_brute_force_attacks()
                    self.print_results_table(results, "–ü—ñ–¥–æ–∑—Ä—ñ–ª—ñ IP-–∞–¥—Ä–µ—Å–∏")
                elif choice == '8':
                    results = self.get_critical_events_week()
                    self.print_results_table(results, "–ö—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–¥—ñ—ó –∑–∞ —Ç–∏–∂–¥–µ–Ω—å")
                elif choice == '9':
                    keyword = input("–í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ—à—É–∫—É: ").strip()
                    if keyword:
                        results = self.search_events_by_keyword(keyword)
                        self.print_results_table(results, f"–ü–æ—à—É–∫ –∑–∞ '{keyword}'")
                elif choice == '10':
                    file_path = input("–®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è 'sample_logs.txt'): ").strip()
                    if not file_path:
                        file_path = "sample_logs.txt"
                    num_entries = input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è 100): ").strip()
                    num_entries = int(num_entries) if num_entries.isdigit() else 100
                    self.generate_sample_logs(file_path, num_entries)
                else:
                    print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")
                    
            except KeyboardInterrupt:
                print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                break
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    def _show_statistics(self):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º–∏"""
        stats = self.get_statistics()
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–ò:")
        print(f"üìç –î–∂–µ—Ä–µ–ª –ø–æ–¥—ñ–π: {stats['total_sources']}")
        print(f"üè∑Ô∏è  –¢–∏–ø—ñ–≤ –ø–æ–¥—ñ–π: {stats['total_event_types']}")
        print(f"üìù –í—Å—å–æ–≥–æ –ø–æ–¥—ñ–π: {stats['total_events']}")
        
        print(f"\nüìç –î–ñ–ï–†–ï–õ–ê –ü–û–î–Ü–ô:")
        for source in stats['sources']:
            print(f"  ‚Ä¢ {source['name']} ({source['type']}) - {source['location']}")
        
        print(f"\nüè∑Ô∏è  –¢–ò–ü–ò –ü–û–î–Ü–ô:")
        for event_type in stats['event_types']:
            print(f"  ‚Ä¢ {event_type['type_name']} [{event_type['severity']}]")
    
    def _register_source_interactive(self):
        """–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –¥–∂–µ—Ä–µ–ª–∞"""
        print("\nüìù –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –ù–û–í–û–ì–û –î–ñ–ï–†–ï–õ–ê –ü–û–î–Ü–ô:")
        name = input("–ù–∞–∑–≤–∞ –¥–∂–µ—Ä–µ–ª–∞: ").strip()
        location = input("–ú—ñ—Å—Ü–µ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è/IP: ").strip()
        source_type = input("–¢–∏–ø –¥–∂–µ—Ä–µ–ª–∞: ").strip()
        
        if name and location and source_type:
            self.register_event_source(name, location, source_type)
        else:
            print("‚ùå –í—Å—ñ –ø–æ–ª—è —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º–∏")
    
    def _register_event_type_interactive(self):
        """–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ç–∏–ø—É –ø–æ–¥—ñ—ó"""
        print("\nüè∑Ô∏è  –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –ù–û–í–û–ì–û –¢–ò–ü–£ –ü–û–î–Ü–ô:")
        type_name = input("–ù–∞–∑–≤–∞ —Ç–∏–ø—É –ø–æ–¥—ñ—ó: ").strip()
        print("–î–æ—Å—Ç—É–ø–Ω—ñ —Ä—ñ–≤–Ω—ñ —Å–µ—Ä–π–æ–∑–Ω–æ—Å—Ç—ñ: Informational, Warning, Critical")
        severity = input("–°–µ—Ä–π–æ–∑–Ω—ñ—Å—Ç—å: ").strip()
        
        if type_name and severity:
            self.register_event_type(type_name, severity)
        else:
            print("‚ùå –í—Å—ñ –ø–æ–ª—è —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º–∏")
    
    def _log_event_interactive(self):
        """–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –∑–∞–ø–∏—Å –ø–æ–¥—ñ—ó"""
        print("\n‚úçÔ∏è  –ó–ê–ü–ò–° –ù–û–í–û–á –ü–û–î–Ü–á –ë–ï–ó–ü–ï–ö–ò:")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞
        sources = self.get_event_sources()
        print("–î–æ—Å—Ç—É–ø–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞:")
        for i, source in enumerate(sources, 1):
            print(f"  {i}. {source['name']} ({source['type']})")
        
        source_idx = input("–ù–æ–º–µ—Ä –¥–∂–µ—Ä–µ–ª–∞: ").strip()
        if not source_idx.isdigit() or int(source_idx) < 1 or int(source_idx) > len(sources):
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –¥–∂–µ—Ä–µ–ª–∞")
            return
        
        source_id = sources[int(source_idx) - 1]['id']
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–∏–ø–∏ –ø–æ–¥—ñ–π
        event_types = self.get_event_types()
        print("\n–î–æ—Å—Ç—É–ø–Ω—ñ —Ç–∏–ø–∏ –ø–æ–¥—ñ–π:")
        for i, event_type in enumerate(event_types, 1):
            print(f"  {i}. {event_type['type_name']} [{event_type['severity']}]")
        
        type_idx = input("–ù–æ–º–µ—Ä —Ç–∏–ø—É –ø–æ–¥—ñ—ó: ").strip()
        if not type_idx.isdigit() or int(type_idx) < 1 or int(type_idx) > len(event_types):
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–∏–ø—É –ø–æ–¥—ñ—ó")
            return
        
        event_type_id = event_types[int(type_idx) - 1]['id']
        
        message = input("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ").strip()
        ip_address = input("IP-–∞–¥—Ä–µ—Å–∞ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ): ").strip() or None
        username = input("–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ): ").strip() or None
        
        if message:
            self.log_security_event(source_id, event_type_id, message, ip_address, username)
        else:
            print("‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º")
    
    def _import_logs_interactive(self):
        """–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —ñ–º–ø–æ—Ä—Ç –ª–æ–≥—ñ–≤"""
        print("\nüìÅ –Ü–ú–ü–û–†–¢ –õ–û–ì–Ü–í –ó –§–ê–ô–õ–£:")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞
        sources = self.get_event_sources()
        print("–î–æ—Å—Ç—É–ø–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞:")
        for i, source in enumerate(sources, 1):
            print(f"  {i}. {source['name']} ({source['type']})")
        
        source_idx = input("–ù–æ–º–µ—Ä –¥–∂–µ—Ä–µ–ª–∞: ").strip()
        if not source_idx.isdigit() or int(source_idx) < 1 or int(source_idx) > len(sources):
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –¥–∂–µ—Ä–µ–ª–∞")
            return
        
        source_name = sources[int(source_idx) - 1]['name']
        
        file_path = input("–®–ª—è—Ö –¥–æ –ª–æ–≥-—Ñ–∞–π–ª—É: ").strip()
        if file_path:
            self.import_logs_from_file(file_path, source_name)
        else:
            print("‚ùå –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º")